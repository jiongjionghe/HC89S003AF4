C51 COMPILER V9.60.7.0   SOFT_TIMER                                                        07/24/2023 16:07:47 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SOFT_TIMER
OBJECT MODULE PLACED IN .\Objects\soft_timer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\HAEDWARE\soft_timer\soft_timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(..\HAEDWARE\soft_timer;..\HAEDWARE\uart_Ringbuf) DEBUG OBJECTEXTEND PRINT(.\Listings\soft_timer.lst) OBJECT(.\Objects\
                    -soft_timer.obj)

line level    source

   1          
   2          /**
   3            ******************************************************************************
   4            * @file    soft_timer.c
   5            * @author  zhy,celticzy@gmail.com
   6            * @version V0.1
   7            * @date    2013-01-13
   8            * @brief   source file for software timer.
   9            * 
  10            ******************************************************************************
  11            */
  12          
  13          #include "soft_timer.h"
  14          
  15          static struct soft_timer* soft_timer_list;
  16          
  17          /**
  18            * @brief  reset the soft_timer_list.
  19            * @retval None.
  20            */
  21          
  22          void soft_timer_list_reset(void)
  23          {
  24   1              soft_timer_list = TIMER_NULL;
  25   1      }
  26          
  27          
  28          /**
  29            * @brief  add a timer to the software timer list.
  30            * @param  timer---------pointer to the timer you want to add.
  31            * @param  call_back-----the call back function when the timer is over.
  32            * @param  time_count-----the timer count.
  33            * @retval None.
  34            */
  35          
  36          
  37          void add_timer(struct soft_timer* timer,void(*call_back)(void),unsigned int time_count)
  38          {
  39   1              struct soft_timer* p;
  40   1      
  41   1              p = soft_timer_list;
  42   1      
  43   1              if(p==TIMER_NULL)                               //if the soft_timer_list have no timer
  44   1              {
  45   2                      p = timer;
  46   2                      p->flag = TIMER_FLAG_SUSPEND;
  47   2                      p->tick_count = time_count;
  48   2                      p->time_over_proc = call_back;
  49   2                      p->next = TIMER_NULL;
  50   2                      soft_timer_list = p;
  51   2      
  52   2              }
  53   1              else
C51 COMPILER V9.60.7.0   SOFT_TIMER                                                        07/24/2023 16:07:47 PAGE 2   

  54   1              {
  55   2                      p = soft_timer_list;
  56   2                      while(p->next!=TIMER_NULL)
  57   2                      {
  58   3                              p = p->next;
  59   3                      }
  60   2                      p->next = timer;
  61   2                      p->next->flag = TIMER_FLAG_SUSPEND;
  62   2                      p->next->tick_count = time_count;
  63   2                      p->next->time_over_proc = call_back;
  64   2                      p->next->next = TIMER_NULL; 
  65   2              }
  66   1              
  67   1      
  68   1      
  69   1      
  70   1      }
  71          
  72          
  73          /**
  74            * @brief  remove a timer from the software timer list.
  75            * @retval None.
  76            */
  77          void remove_timer(struct soft_timer* timer)
  78          {
  79   1              struct soft_timer* t;
  80   1              for(t = soft_timer_list; t != TIMER_NULL; t = t->next)
  81   1              {
  82   2                      if(t->next==timer)
  83   2                      {
  84   3                              t->next = timer->next;
  85   3                              break;
  86   3                      }
  87   2              }
  88   1      }
  89          
  90          
  91          
  92          /**
  93            * @brief  start or continue a timer   
  94            * @retval None.
  95            */
  96          
  97          void start_timer(struct soft_timer* timer)
  98          {
  99   1              timer->flag = TIMER_FLAG_RUN ;
 100   1      }
 101          
 102          
 103          
 104          
 105          
 106          
 107          
 108          /**
 109            * @brief  stop a timer without calling back
 110            * @retval None.
 111            */
 112          void stop_timer(struct soft_timer* timer)
 113          {
 114   1              timer->flag = TIMER_FLAG_STOP;
 115   1              timer->tick_count = 0;
C51 COMPILER V9.60.7.0   SOFT_TIMER                                                        07/24/2023 16:07:47 PAGE 3   

 116   1      }
 117          
 118          
 119          
 120          /**
 121            * @brief  stop a timer with calling back
 122            * @retval None.
 123            */
 124          
 125          void stop_timer_with_call(struct soft_timer* timer)
 126          {
 127   1              if(timer->flag == TIMER_FLAG_RUN)
 128   1                      timer->tick_count = 0;
 129   1              else if(timer->flag == TIMER_FLAG_SUSPEND)
 130   1              {
 131   2                      timer->flag = TIMER_FLAG_RUN;
 132   2                      timer->tick_count = 0;
 133   2              }
 134   1      }
 135          
 136          
 137          
 138          /**
 139            * @brief  suspend a timer
 140            * @retval None.
 141            */
 142          void suspend_timer(struct soft_timer* timer)
 143          {
 144   1              if(timer->flag == TIMER_FLAG_RUN)
 145   1                      timer->flag = TIMER_FLAG_SUSPEND;
 146   1      }
 147          
 148          
 149          /**
 150            * @brief  reload the tick_count for a timer
 151            * @retval None.
 152            */
 153          void reload_timer(struct soft_timer* timer,unsigned int time_count)
 154          {
 155   1              timer->flag = TIMER_FLAG_SUSPEND;
 156   1              timer->tick_count = time_count;
 157   1      }
 158          
 159          
 160          
 161          /**
 162            * @brief  shoulde be called periodicly by the hardware timer ISR 
 163            * @retval None.
 164            */
 165          void timer_periodic_refresh(void)
 166          {
 167   1              struct soft_timer* t;
 168   1      
 169   1              for(t = soft_timer_list; t != TIMER_NULL; t = t->next) //每个软件定时器都轮询一遍
 170   1              {
 171   2                      if(t->flag==TIMER_FLAG_RUN) //软件定时器在运行
 172   2                      {
 173   3                              if(t->tick_count > 0)
 174   3                                      -- t->tick_count;
 175   3                              else                     //计时时间到了
 176   3                              {
 177   4                                      stop_timer(t);      //停止定时器
C51 COMPILER V9.60.7.0   SOFT_TIMER                                                        07/24/2023 16:07:47 PAGE 4   

 178   4                                      t->time_over_proc();//执行对应函数(类似于中断服务函数)
 179   4                              }
 180   3                      }
 181   2              }
 182   1      }
 183          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    812    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
