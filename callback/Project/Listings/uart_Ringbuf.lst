C51 COMPILER V9.60.7.0   UART_RINGBUF                                                      07/24/2023 16:07:48 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE UART_RINGBUF
OBJECT MODULE PLACED IN .\Objects\uart_Ringbuf.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\HAEDWARE\uart_Ringbuf\uart_Ringbuf.c LARGE OPTIMIZE(8,SPEED) BROWSE I
                    -NCDIR(..\HAEDWARE\soft_timer;..\HAEDWARE\uart_Ringbuf) DEBUG OBJECTEXTEND PRINT(.\Listings\uart_Ringbuf.lst) OBJECT(.\Ob
                    -jects\uart_Ringbuf.obj)

line level    source

   1          #include "uart_Ringbuf.h"
   2          
   3          
   4          /***************************************************************************************
   5           * @说明        初始化环形队列
   6           * @参数        RingBuff_t *ringbuff : 待初始化的环形队列
   7           * @返回值  无
   8           * @注          无
   9           ***************************************************************************************/
  10          void RingBuff_Init(RingBuff_t *ringbuff)
  11          {
  12   1          //初始化相关信息
  13   1          ringbuff->Head = 0;
  14   1          ringbuff->Tail = 0;
  15   1          ringbuff->Lenght = 0;
  16   1          ringbuff->FlagByte = 0;
  17   1          
  18   1          ringbuff->FlagByte |= 0x01; //串口空闲
  19   1      }
  20          
  21          
  22          /***************************************************************************************
  23           * @说明        向环形队列写入数据
  24           * @参数        unsigned char mydata : 要写入的数据
  25           * @参数        RingBuff_t *ringbuff : 写入的环形队列
  26           * @返回值  无
  27           * @注          无
  28           ***************************************************************************************/
  29          unsigned char Write_RingBuff(unsigned char mydata,RingBuff_t *ringbuff)
  30          {
  31   1          if(ringbuff->Lenght >= RINGBUFF_LEN) //判断缓冲区是否已满
  32   1          {
  33   2              return RINGBUFF_ERR;
  34   2          }
  35   1          ringbuff->Ring_data[ringbuff->Tail]=mydata;
  36   1          ringbuff->Tail = (ringbuff->Tail+1)%RINGBUFF_LEN;//防止越界非法访问
  37   1          ringbuff->Lenght++;
  38   1      
  39   1          return RINGBUFF_OK;
  40   1      }
  41          
  42          /***************************************************************************************
  43           * @说明        向环形队列读取一个字节的数据
  44           * @参数        unsigned char *rData : 读出的数据
  45           * @参数        RingBuff_t *ringbuff : 需要读取的环形队列
  46           * @返回值  无
  47           * @注          无
  48           ***************************************************************************************/
  49          unsigned char  Read_RingBuff(unsigned char *rData,RingBuff_t *ringbuff)
  50          {
  51   1          if(ringbuff->Lenght == 0)//判断非空
  52   1          {
  53   2              return RINGBUFF_ERR;
C51 COMPILER V9.60.7.0   UART_RINGBUF                                                      07/24/2023 16:07:48 PAGE 2   

  54   2          }
  55   1          *rData = ringbuff->Ring_data[ringbuff->Head];//先进先出FIFO，从缓冲区头出
  56   1          ringbuff->Head = (ringbuff->Head+1)%RINGBUFF_LEN;//防止越界非法访问
  57   1          ringbuff->Lenght--;
  58   1          return RINGBUFF_OK;
  59   1      }
  60          
  61          /***************************************************************************************
  62           * @说明        向环形队列写入一个数组的数据
  63           * @参数        unsigned char *myStr : 要写入的数据
  64           * @参数        RingBuff_t *ringbuff : 写入的环形队列
  65           * @返回值  无
  66           * @注          无
  67           ***************************************************************************************/
  68          void WriteStr_RingBuff(unsigned char *myStr,RingBuff_t *ringbuff)
  69          {
  70   1          unsigned char i;
  71   1          for(i = 0; myStr[i] != '\0'; i++)
  72   1          {
  73   2              Write_RingBuff(myStr[i],ringbuff);
  74   2          }
  75   1      }
  76          
  77          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    388    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
