C51 COMPILER V9.60.7.0   UART                                                              07/22/2023 17:30:50 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\HAEDWARE\uart\uart.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\HAEDWAR
                    -E\soft_timer;..\HAEDWARE\uart) DEBUG OBJECTEXTEND PRINT(.\Listings\uart.lst) OBJECT(.\Objects\uart.obj)

line level    source

   1          #include "uart.h"
   2          
   3          
   4          /**
   5          * @brief  RingBuff_Init
   6          * @param  *ringbuff 带初始化的缓冲区
   7          * @return void
   8          * @note   初始化环形缓冲区
   9          */
  10          void RingBuff_Init(RingBuff_t *ringbuff)
  11          {
  12   1          //初始化相关信息
  13   1          ringbuff->Head = 0;
  14   1          ringbuff->Tail = 0;
  15   1          ringbuff->Lenght = 0;
  16   1          ringbuff->FlagByte = 0;
  17   1          ringbuff->FlagByte |= 0x01; //串口空闲
  18   1      }
  19          
  20          
  21          /**
  22          * @brief  Write_RingBuff
  23          * @param  unsigned char mydata     RingBuff_t *ringbuff
  24          * @return FLASE:环形缓冲区已满，写入失败;TRUE:写入成功
  25          * @note   往环形缓冲区写入uint8_t类型的数据
  26          */
  27          unsigned char Write_RingBuff(unsigned char mydata,RingBuff_t *ringbuff)
  28          {
  29   1          if(ringbuff->Lenght >= RINGBUFF_LEN) //判断缓冲区是否已满
  30   1          {
  31   2              return RINGBUFF_ERR;
  32   2          }
  33   1          ringbuff->Ring_data[ringbuff->Tail]=mydata;
  34   1          ringbuff->Tail = (ringbuff->Tail+1)%RINGBUFF_LEN;//防止越界非法访问
  35   1          ringbuff->Lenght++;
  36   1      
  37   1          return RINGBUFF_OK;
  38   1      }
  39          
  40          /**
  41          * @brief  Read_RingBuff
  42          * @param  unsigned char *rData，用于保存读取的数s据
  43          * @return FLASE:环形缓冲区没有数据，读取失败;TRUE:读取成功
  44          * @note   从环形缓冲区读取一个u8类型的数据
  45          */
  46          unsigned char  Read_RingBuff(unsigned char *rData,RingBuff_t *ringbuff)
  47          {
  48   1          if(ringbuff->Lenght == 0)//判断非空
  49   1          {
  50   2              return RINGBUFF_ERR;
  51   2          }
  52   1          *rData = ringbuff->Ring_data[ringbuff->Head];//先进先出FIFO，从缓冲区头出
  53   1          ringbuff->Head = (ringbuff->Head+1)%RINGBUFF_LEN;//防止越界非法访问
  54   1          ringbuff->Lenght--;
C51 COMPILER V9.60.7.0   UART                                                              07/22/2023 17:30:50 PAGE 2   

  55   1          return RINGBUFF_OK;
  56   1      }
  57          
  58          
  59          void WriteStr_RingBuff(unsigned char *myStr,RingBuff_t *ringbuff)
  60          {
  61   1          unsigned char i;
  62   1          for(i = 0; myStr[i] != '\0'; i++)
  63   1          {
  64   2              Write_RingBuff(myStr[i],ringbuff);
  65   2          }
  66   1      }
  67          
  68          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    388    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
